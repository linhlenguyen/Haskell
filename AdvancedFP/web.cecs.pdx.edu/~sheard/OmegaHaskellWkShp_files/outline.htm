<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 10">
<link id=Main-File rel=Main-File href="../OmegaHaskellWkShp.htm">
<link rel=Preview href=preview.wmf>
<meta name=Robots content=NoIndex>
<script src=script.js></script><script><!--
if( !(IsWin("PPTOtl")||IsWin("PPTNav")||IsWin("PPTOtlNav")) )
{
	obj = GetObj("Main-File")
	parent.location.href=obj.href
}
var gOtlHiliteClr="#ffffff",gOtlNormalClr="#000000",gOtlActiveClr="#ffff00",gSelected="",gTxtState=false,gChildEntryTable=new Array()
function Load()
{
	if( IsWin("PPTOtl" ) ){ LoadOtl(); parent.gOtlLoaded=true; return }
	if( g_supportsPPTHTML ) {
		if( IsWin("PPTNav" ) ){ LoadNav("NavObj",UpdNav); parent.gNavLoaded=true; return }
		if( IsWin("PPTOtlNav" ) ){ LoadNav("OtlNavObj",UpdOtlNav); parent.gOtlNavLoaded=true; return }
	}
}
function Upd(){ if( IsWin("PPTNav") ) LoadNav("NavObj",UpdNav) }
function LoadNav( oId,UpdFunc )
{
	document.ondragstart=CancelDrag
	document.onselectstart=CancelDrag
	document.body.style.margin=2
	UpdFunc()
	obj=document.all.item(oId)
	obj.style.display="block"
	obj.style.visibility="visible"
	document.bgColor="threedface"
	if( parent.frames["PPTNts"] )
		notesBtn.style.display = ""
	if( parent.gHasNarration )
		nb_voiceBorder.style.display = ""
}
function LoadOtl()
{
	var otl=GetObj("OtlObj")
	otl.style.display="block"
	otl.style.visibility="visible"
	if( gOtlActiveClr == "" ) gOtlActiveClr=document.linkColor
	if( gOtlHiliteClr == "" ) gOtlHiliteClr=document.fgColor
	if( gOtlNormalClr == "" )
		gOtlNormalClr=document.bgColor
	else
		document.bgColor=gOtlNormalClr
	InitArray()
	if( ObjExists( parent.gCurSld ) ) {
		ChangeState( parent.gCurSld,gOtlNormalClr,gOtlHiliteClr )
		gSelected=parent.gCurSld
	}
	else gSelected = -1
	UpdOtl()
}
function UpdOtl(){ UpdIdx(parent.gCurSld) }
function UpdIdx( idx )
{
	if( gSelected != idx ) {
		if( gSelected > 0 )
			ChangeState( gSelected,gOtlHiliteClr,gOtlNormalClr )
		if( ObjExists( idx ) ) {
			gSelected = idx
			ChangeState( gSelected,gOtlNormalClr,gOtlHiliteClr )
		}
		else gSelected = -1
	}
	if( gTxtState != parent.gOtlTxtExp ) {
		state = "block"
		if( !parent.gOtlTxtExp )
			state="none"
		for(ii=0; ii<gChildEntryTable.length; ii++) {
			obj=gChildEntryTable[ii];
			if( obj.id == null ) continue;
			if( obj.id.indexOf("PPTC") >= 0 )
				obj.style.display=state;
		}
		gTxtState=parent.gOtlTxtExp
		if( ObjExists( gSelected ) )
			ChangeState( gSelected,gOtlNormalClr,gOtlHiliteClr )
	}
}
function InitArray()
{
	count=0
	var list=GetTags(document,"DIV");
	for(ii=0; ii<list.length; ii++) {
		obj=list.item(ii)
		if( obj.id == null ) continue
		if( obj.id.indexOf("PPTC") >= 0 )
			gChildEntryTable[count++]=obj
	}
}
function ChangeState( idx,fgColor,bgColor )
{
	obj=GetObj("PPTL"+idx)
	obj.style.color=fgColor
	obj=GetObj("PPTP"+idx)
	obj.style.backgroundColor=bgColor
}
function ChgClr( o,clr ){ if( o.id != "PPTL"+gSelected ) o.style.color=clr }
function Over( src ){ ChgClr(GetLink(src),gOtlActiveClr) }
function Out( src ){ ChgClr(GetLink(src),gOtlHiliteClr) }
function Follow(src){ window.location.href = GetLink(src).href; }
function ObjExists( ii ) { obj=GetObj("PPTP"+ii ); return( obj ) }
function GoToSld( href ){ UpdIdx(parent.GetSldNum(href)); parent.GoToSld( href ) }
function CancelDrag(){ window.event.cancelBubble=true;window.event.returnValue=false}
function GetLink(src)
{
   if(src.tagName=="A") return src
   else return GetTags(src,"A").item(0)
}
function UpdNav()
{
	txt = "<center>";
	if( parent.GetHrefObj( parent.gCurSld ).mOrigVis == 1 )
		txt += "Slide " + parent.GetCurSldNum() + " of " + parent.GetNumSlds()
	else
		txt += "Hidden Slide"
	txt += "</center>";
	nav_text.innerHTML = txt;
	if( !parent.HasPrevSld() )
		gBtnArr["nb_prev"].Enabled(0)
	else
		gBtnArr["nb_prev"].Enabled(1)
	if( !parent.HasNextSld() )
		gBtnArr["nb_next"].Enabled(0)
	else
		gBtnArr["nb_next"].Enabled(1)
	gBtnArr["nb_nts"].SetEnabled()
	gBtnArr["nb_nts"].SetFlag( parent.gHasNts )
	gBtnArr["nb_sldshw"].Enabled(1)
	gBtnArr["nb_voice"].Enabled(1)
}
function UpdOtlNav()
{
	gBtnArr["nb_otl"].SetEnabled();
	if( parent.gOtlOpen )
		gBtnArr["nb_otlTxt"].Enabled( true );
	else
		document.all.item("nb_otlTxtBorder").style.visibility = "hidden";
}

//--></script>
<style>
<!--.PTxt
	{position:relative;
	width:100%;
	margin-top:5px;
	padding-left:2px;
	font-weight:bold;}
.CTxt
	{position:relative;
	width:100%;
	margin-top:5px;}
a
	{color:white;
	text-decoration:none;}
ul
	{color:white;
	margin-bottom:0px;
	margin-left:20px;}
.sldNum
	{margin-top:5px;
	color:white;}
.button
	{position:absolute;
	width:32px;
	height:20px;
	border-style:solid;
	border-width:1px;
	border-color:threedface;}
-->
</style>
</head>

<body onload="Load()" style='margin:2px'>

<div id=NavObj onload="Load()" onmouseover="BtnOnOver()"
onmousedown="BtnOnDown()" onmouseout="BtnOnOut()" onmouseup="BtnOnUp()"
onkeypress="_KPH()" style='display:none;visibility:hidden'>
<table id="notesBtn" style='position:absolute;display:none;width:70px' align=left cellpadding=0
 cellspacing=0>
 <td nowrap>
 <div id="nb_ntsElem" align=center style='position:relative;padding:3px;
 font-family:Arial;color:buttontext;font-size:9pt'><img src="notes_flag.gif"
 border=0 id="notes_flag" style='display:none'><span
style='mso-spacerun:yes'>  </span>Notes</div>
 <div title="Show/Hide Notes" id="nb_nts" style='position:absolute;top:0%;
 left:0%;width:100%;height:100%'></div>
 </td>
</table>

<table style='position:relative;width:70px' align=right cellpadding=0 cellspacing=0>
 <td nowrap>
 <div id="nb_sldshwText" title="Full
Screen Slide Show" align=center style='position:relative;margin-left:20px;padding:3px;
 font-family:Arial;color:buttontext;font-size:9pt;cursor:default'>Slide
Show</div>
 <div id="nb_sldshwBorder" title="Full Screen Slide Show" style='position:absolute;top:0%;left:0%;width:100%;height:20px'>
 <div style='position:absolute;clip:rect(0px, 18px, 18px, 0px)'><img
 src="buttons.gif" id="nb_sldshw" style='position:relative;left:-254px'></div>
 </div>
 </td>
 <td>
 <div id="nb_voiceBorder" style='display:none;position:absolute;top:0;left:-40px;
 width:20px;height:20px'>
 <div style='position:absolute;clip:rect(0px, 18px, 18px, 0px)'><img
 src="buttons.gif" id="nb_voice" title="Pause/Play Narration" style='position:
 relative;left:-290px'></div>
 </div>
 </td>
</table>

<table style='position:relative' align=center cellpadding=0 cellspacing=0>
 <td nowrap>
 <div id="nb_prevBorder" class=button style='left:-30px'>
 <div style='position:absolute;clip:rect(0px, 30px, 18px, 0px)'><img
 src="buttons.gif" id="nb_prev" title="Previous Slide" style='position:relative;
 left:0px'></div>
 </div>
 <span id="nav_text" style='position:relative;top:3px;width:100px;font-family:
 Arial;color:buttontext;font-size:9pt'></span>
 <div id="nb_nextBorder" class=button>
 <div style='position:absolute;clip:rect(0px, 30px, 18px, 0px)'><img
 src="buttons.gif" id="nb_next" title="Next Slide" style='position:relative;
 left:-90px'></div>
 </div>
 </td>
</table>
</div>

<div id=OtlNavObj onload="Load()" onmouseover="BtnOnOver()"
onmousedown="BtnOnDown()" onmouseout="BtnOnOut()" onmouseup="BtnOnUp()"
onkeypress="_KPH()" style='display:none;visibility:hidden'>

<table style='position:relative;width:70px' align=left cellpadding=0 cellspacing=0>
 <td nowrap><div title="Show/Hide
Outline" id="nb_otl"
 style='position:absolute;top:0%;left:0%;width:100%;height:100%;cursor:default'>
 <div id="nb_otlElem" align=center style='position:relative;padding:3px;font-family:Arial;
 color:buttontext;font-size:9pt'>Outline</div></div>
 </td>
</table>

<table style='position:relative' align=center cellpadding=0 cellspacing=0>
 <td>
 <div style='position:absolute;left:-18px;width:24px;height:20px;border-style:
 solid;border-width:1px;border-color:threedface' id="nb_otlTxtBorder">
 <div style='position:absolute;clip:rect(0px, 22px, 18px, 0px)'><img
 src=buttons.gif id="nb_otlTxt" title="Expand/Collapse Outline"
 style='position:relative;left:-157px'></div>
 </div>
 </td>
</table>

</div>

<div id=OtlObj style='display:none;visibility:hidden;'>


<table width="100%" style='font-family:Arial;font-size:9pt'>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>1</font></div>
  </td>
  <td width="100%">
  <div id=PPTP1 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0001.htm');" id=PPTL1>Generalizing Algebraic
  Datatypes in <font face=Symbol>W</font><font face=Arial>mega</font></a></font></div>
  <div id=PPTC1 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Tim Sheard</li>
   <li>Portland State University</li>
   <li>(formerly from OGI/OHSU)</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>2</font></div>
  </td>
  <td>
  <div id=PPTP2 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0002.htm');" id=PPTL2>Algebraic Datatypes</a></font></div>
  <div id=PPTC2 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Inductively formed structured data</li>
   <ul>
    <li>Generalizes enumerations &amp; tagged variants</li>
   </ul>
   <li>Types used to prevent the construction of ill-formed data</li>
   <li>Pattern matching allows abstract high level (yet still efficient) access</li>
   <li>Can be parameterized to make polymorphic container-like structures</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>3</font></div>
  </td>
  <td>
  <div id=PPTP3 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0003.htm');" id=PPTL3>Example</a></font></div>
  <div id=PPTC3 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Data Tree a</li>
   <li><span style='mso-spacerun:yes'>   </span>= Fork (Tree a) (Tree a)</li>
   <li><span style='mso-spacerun:yes'>   </span>| Node a</li>
   <li><span style='mso-spacerun:yes'>   </span>| Tip</li>
   <br>
   <br>
   <li>Fork :: Tree a -&gt; Tree a -&gt; Tree a</li>
   <li>Node :: a -&gt; Tree a</li>
   <li>Tip :: Tree a</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>4</font></div>
  </td>
  <td>
  <div id=PPTP4 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0004.htm');" id=PPTL4>Why remove the
  restriction?</a></font></div>
  <div id=PPTC4 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>We would like the parameter of a type constructor (e.g. the a in T
       a) to say something about the values with type T a</li>
   <ul>
    <li>phantom types</li>
    <li>indexed types</li>
   </ul>
   <br>
   <li>Imagine a type-indexed Term datatype</li>
   <br>
   <br>
   <ul>
    <li>Int :: Int -&gt; Term Int</li>
    <li>Bool :: Bool -&gt; Term Bool</li>
    <li>Plus :: Term Int -&gt; Term Int -&gt; Term Int</li>
    <li>Less :: Term Int -&gt; Term Int -&gt; Term Bool</li>
    <li>If :: Term Bool -&gt; Term a -&gt; Term a -&gt; Term a</li>
   </ul>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>5</font></div>
  </td>
  <td>
  <div id=PPTP5 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0006.htm');" id=PPTL5>Type-indexed Data</a></font></div>
  <div id=PPTC5 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Benefits</li>
   <ul>
    <li>The type system disallows ill-formed Terms like:</li>
    <li><span style='mso-spacerun:yes'>     </span>(If (Int 3) (Int 0) (Int 9))</li>
    <li>Documentation</li>
   </ul>
   <li>Problems</li>
   <ul>
    <li>How do we type pattern matching?</li>
    <li><span style='mso-spacerun:yes'> </span>case x of</li>
    <li><span style='mso-spacerun:yes'>  </span>(Int n) -&gt; . . .</li>
    <li><span style='mso-spacerun:yes'>  </span>(Bool b)-&gt; . . .</li>
    <li>What type is x?</li>
   </ul>
   <br>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>6</font></div>
  </td>
  <td>
  <div id=PPTP6 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0005.htm');" id=PPTL6>Generalization # 1<br>
    Equality Qualified Types</a></font></div>
  <div id=PPTC6 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Data Term a</li>
   <li><span style='mso-spacerun:yes'> </span>= Int Int where a=Int</li>
   <li><span style='mso-spacerun:yes'> </span>| Bool Bool where a=Bool</li>
   <li><span style='mso-spacerun:yes'> </span>| Plus (Term Int) (Term Int) where
       a=Int</li>
   <li><span style='mso-spacerun:yes'> </span>| Less (Term Int) (Term Int) where
       a=Bool</li>
   <li><span style='mso-spacerun:yes'> </span>| If (Term Bool) (Term a) (Term
       a)</li>
   <br>
   <br>
   <li>Int :: forall a.(a=Int) =&gt; Int -&gt; Term a</li>
   <br>
   <br>
   <li>We can specialize this kind of type to the ones we want</li>
   <br>
   <br>
   <li>Int :: Int -&gt; Term Int</li>
   <li>Bool :: Bool -&gt; Term Bool</li>
   <li>Plus :: Term Int -&gt; Term Int -&gt; Term Int</li>
   <li>Less :: Term Int -&gt; Term Int -&gt; Term Bool</li>
   <li>If :: Term Bool -&gt; Term a -&gt; Term a -&gt; Term a</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>7</font></div>
  </td>
  <td>
  <div id=PPTP7 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0008.htm');" id=PPTL7>Programming</a></font></div>
  <div id=PPTC7 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>eval :: Term a -&gt; a</li>
   <li>eval (Int n) = n</li>
   <li>eval (Bool b) = b</li>
   <li>eval (Plus x y) = eval x + eval y</li>
   <li>eval (Less x y) = eval x &lt; eval y</li>
   <li>eval (If x y z) =</li>
   <li><span style='mso-spacerun:yes'>   </span>if (eval x)</li>
   <li><span style='mso-spacerun:yes'>      </span>then (eval y)</li>
   <li><span style='mso-spacerun:yes'>      </span>else (eval z)</li>
   <br>
   <br>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>8</font></div>
  </td>
  <td>
  <div id=PPTP8 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0009.htm');" id=PPTL8>Type Checking</a></font></div>
  <div id=PPTC8 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>eval :: Term a<span style='mso-spacerun:yes'>  </span>-&gt;<span
       style='mso-spacerun:yes'>       </span>a</li>
   <br>
   <br>
   <li>eval (Less x y) = eval x &lt; eval y</li>
   <br>
   <br>
   <br>
   <li>Less::(a=Bool)=&gt;Term Int -&gt; Term Int -&gt; Term Bool</li>
   <br>
   <br>
   <li><span style='mso-spacerun:yes'> </span>x<span
       style='mso-spacerun:yes'>     </span>:: Term Int</li>
   <li><span style='mso-spacerun:yes'> </span>y<span
       style='mso-spacerun:yes'>                 </span>:: Term Int</li>
   <li><span style='mso-spacerun:yes'> </span>(eval x)<span
       style='mso-spacerun:yes'>          </span>:: Int</li>
   <li><span style='mso-spacerun:yes'> </span>(eval y)<span
       style='mso-spacerun:yes'>          </span>:: Int</li>
   <li><span style='mso-spacerun:yes'> </span>(eval x &lt; eval y) :: Bool</li>
   <br>
   <br>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>9</font></div>
  </td>
  <td>
  <div id=PPTP9 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0011.htm');" id=PPTL9>Generalization #2<br>
    New Kinds</a></font></div>
  <div id=PPTC9 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Allow algebraic definitions to define new kinds as well as new types</li>
   <ul>
    <li>The primitive kind: *</li>
    <ul>
     <li>5 :: Int :: *</li>
     <li>[Int] :: *</li>
     <li>[] :: * ~&gt; *</li>
    </ul>
    <br>
   </ul>
   <li>Kind Nat = Zero | Succ Nat</li>
   <ul>
    <li>Zero :: Nat</li>
    <li>Succ :: Nat ~&gt; Nat</li>
    <li>Succ Zero :: Nat</li>
   </ul>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>10</font></div>
  </td>
  <td>
  <div id=PPTP10 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0026.htm');" id=PPTL10><span
  style='mso-spacerun:yes'> </span></a></font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>11</font></div>
  </td>
  <td>
  <div id=PPTP11 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0010.htm');" id=PPTL11>Basic approach</a></font></div>
  <div id=PPTC11 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Data is a parameterized generalized-algebraic datatype</li>
   <li>It is indexed by some semantic property</li>
   <li>New Kinds introduce new types that are used as indexes</li>
   <li>Programs use types to maintain semantic properties</li>
   <li>The equality constrained types make it possible</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>12</font></div>
  </td>
  <td>
  <div id=PPTP12 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0012.htm');" id=PPTL12>Some examples</a></font></div>
  <div id=PPTC12 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Typed Lambda Calculus</li>
   <li>A Language with Security Domains</li>
   <li>A Language which enforces an interaction protocol</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>13</font></div>
  </td>
  <td>
  <div id=PPTP13 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0013.htm');" id=PPTL13>Typed lambda
  Calculus<br>
    Exp with type t in environment s</a></font></div>
  <div id=PPTC13 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>data V s t</li>
   <li><span style='mso-spacerun:yes'>  </span>= ex m . Z where s = (t,m)</li>
   <li><span style='mso-spacerun:yes'>  </span>| ex m x . S (V m t) where s =
       (x,m)</li>
   <li></li>
   <li>data Exp s t</li>
   <li><span style='mso-spacerun:yes'>  </span>= IntC Int where t = Int</li>
   <li><span style='mso-spacerun:yes'>  </span>| BoolC Bool where t = Bool</li>
   <li><span style='mso-spacerun:yes'>  </span>| Plus (Exp s Int) (Exp s Int) where
       t = Int</li>
   <li><span style='mso-spacerun:yes'>  </span>| Lteq (Exp s Int) (Exp s Int) where
       t = Bool</li>
   <li><span style='mso-spacerun:yes'>  </span>| Var (V s t)</li>
   <br>
   <br>
   <li>Example Type:</li>
   <br>
   <br>
   <li>Plus :: forall s t . (t=Int) =&gt;</li>
   <li><span style='mso-spacerun:yes'>                   </span>Exp s Int -&gt;
       Exp s Int -&gt; Exp s t</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>14</font></div>
  </td>
  <td>
  <div id=PPTP14 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0014.htm');" id=PPTL14>Language with Security
  Domains<br>
    Exp with type t in env s in domain d</a></font></div>
  <div id=PPTC14 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>kind Domain = High | Low</li>
   <br>
   <br>
   <li>data D t</li>
   <li><span style='mso-spacerun:yes'>  </span>= Lo where t = Low</li>
   <li><span style='mso-spacerun:yes'>  </span>| Hi where t = High</li>
   <br>
   <br>
   <li>data Dless x y</li>
   <li><span style='mso-spacerun:yes'>  </span>= LH where x = Low , y = High</li>
   <li><span style='mso-spacerun:yes'>  </span>| LL where x = Low, y = Low</li>
   <li><span style='mso-spacerun:yes'>  </span>| HH where x = High, y = High</li>
   <li></li>
   <li>data Exp s d t</li>
   <li><span style='mso-spacerun:yes'>  </span>= Int Int where t = Int</li>
   <li><span style='mso-spacerun:yes'>  </span>| Bool Bool where t = Bool</li>
   <li><span style='mso-spacerun:yes'>  </span>| Plus (Exp s d Int) (Exp s d
       Int) where t = Int</li>
   <li><span style='mso-spacerun:yes'>  </span>| Lteq (Exp s d Int) (Exp s d
       Int) where t = Bool</li>
   <li><span style='mso-spacerun:yes'>  </span>| forall d2 . Var (V s d2 t)
       (Dless d2 d)</li>
   <br>
   <br>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>15</font></div>
  </td>
  <td>
  <div id=PPTP15 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0015.htm');" id=PPTL15>Language with
  interaction prototcol<br>
    Command with store St starting in state x, ending in state y</a></font></div>
  <div id=PPTC15 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>kind State = Open | Closed</li>
   <br>
   <br>
   <li>data V s t</li>
   <li><span style='mso-spacerun:yes'>  </span>= forall st . Z where s = (t,st)</li>
   <li><span style='mso-spacerun:yes'>  </span>| forall st t1 . S (V st t)</li>
   <li><span style='mso-spacerun:yes'>                  </span>where s =
       (t1,st)</li>
   <br>
   <br>
   <br>
   <li>data Com st x y</li>
   <li><span style='mso-spacerun:yes'>  </span>= forall t . Set (V st t) (Exp
       st t) where x=y</li>
   <li><span style='mso-spacerun:yes'>  </span>| forall a . Seq (Com st x a)
       (Com st a y)</li>
   <li><span style='mso-spacerun:yes'>  </span>| If (Exp st Bool) (Com st x y)
       (Com st x y)</li>
   <li><span style='mso-spacerun:yes'>  </span>| While (Exp st Bool) (Com st x
       y) where x = y</li>
   <li><span style='mso-spacerun:yes'>  </span>| forall t . Declare (Exp st t)
       (Com (t,st) x y)</li>
   <li><span style='mso-spacerun:yes'>  </span>| Open where x = Closed, y =
       Open</li>
   <li><span style='mso-spacerun:yes'>  </span>| Close where x = Open, y =
       Closed</li>
   <li><span style='mso-spacerun:yes'>  </span>| Write (Exp st Int)<span
       style='mso-spacerun:yes'>  </span>where x = Open, y = Open</li>
   <br>
   <br>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>16</font></div>
  </td>
  <td>
  <div id=PPTP16 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0016.htm');" id=PPTL16>Our Original Goals</a></font></div>
  <div id=PPTC16 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Build heterogeneous meta-programming systems</li>
   <ul>
    <li>Meta-language &#8800; object-language</li>
    <br>
    <br>
   </ul>
   <li>Type system of the meta-language guarantees semantic properties of
       object-language</li>
   <br>
   <br>
   <li>Experiment with Omega</li>
   <ul>
    <li>Finding new uses for the power of the type system</li>
    <li>Translating existing language-based ideas into Omega</li>
    <ul>
     <li>staged interpreters</li>
     <li>proof carrying code</li>
     <li>language-based security</li>
    </ul>
   </ul>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>17</font></div>
  </td>
  <td>
  <div id=PPTP17 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0017.htm');" id=PPTL17>Serendipity</a></font></div>
  <div id=PPTC17 class=CTxt style='display:none'><font size=2>
  <ul>
   <li><font face=Symbol>W</font><font face=Arial>megas type system is good
       for statically guaranteeing all sorts of properties.</font></li>
   <ul>
    <li>Lists with statically known length</li>
    <li>RedBlack Trees</li>
    <li>Binomial Heaps</li>
    <li>Dynamic Typing</li>
    <br>
    <br>
   </ul>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>18</font></div>
  </td>
  <td>
  <div id=PPTP18 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0018.htm');" id=PPTL18>Static Length Lists</a></font></div>
  <div id=PPTC18 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>A kind of natural numbers</li>
   <ul>
    <li>Classifies types Z,<span style='mso-spacerun:yes'>    </span>S Z,<span
        style='mso-spacerun:yes'>     </span>S (S Z)</li>
    <ul>
     <li>These types do not classify any runtime computations</li>
    </ul>
   </ul>
   <li>Lists with length n</li>
   <ul>
    <li>List a n:<span style='mso-spacerun:yes'>  </span>list with objects of
        type a whose length is n</li>
    <li>Equality qualifications constrain types</li>
    <ul>
     <li>A list (Cons x xs) has the type (List a (S m)) provided that the list xs
         has the type (List a m)</li>
    </ul>
   </ul>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>19</font></div>
  </td>
  <td>
  <div id=PPTP19 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0019.htm');" id=PPTL19>Equality constraints
  are maintained by the type checker</a></font></div>
  <div id=PPTC19 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Cons :: (n=(S m)) =&gt;a -&gt; (Seq a m) -&gt; (Seq a n)</li>
   <li>When applying a constructor, the equality must be satisfied from a set
       of known facts</li>
   <ul>
    <li>Given<span style='mso-spacerun:yes'>   </span>x : a,</li>
    <li><span style='mso-spacerun:yes'>      </span>y : Seq a m</li>
    <li><span style='mso-spacerun:yes'>      </span>Cons x y :: Seq a n</li>
    <li>Provided we can prove the obligation:<span style='mso-spacerun:yes'> 
        </span>n=S m</li>
   </ul>
   <li>New known facts are introduced when pattern matching against a qualified
       constructor</li>
   <ul>
    <li>The defintion:<span style='mso-spacerun:yes'>  </span>f ((Cons x
        y)::Seq a n) = . . .</li>
    <li>x::a,<span style='mso-spacerun:yes'>  </span>y::Seq a m<span
        style='mso-spacerun:yes'>  </span>and the fact that<span
        style='mso-spacerun:yes'>  </span>n=S m</li>
   </ul>
   <li>Equalities in obligations are solved using the facts by a decision
       procedure</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>20</font></div>
  </td>
  <td>
  <div id=PPTP20 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0020.htm');" id=PPTL20>The type of a function
  may encode a theorem</a></font></div>
  <div id=PPTC20 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>The function map<span style='mso-spacerun:yes'>  </span>preserves the
       length of lists</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>21</font></div>
  </td>
  <td>
  <div id=PPTP21 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0023.htm');" id=PPTL21>What about append</a></font></div>
  <div id=PPTC21 class=CTxt style='display:none'><font size=2>
  <ul>
   <ul>
    <li>(List a m) -&gt; (List a n) -&gt; (List a (m+n))</li>
    <br>
    <br>
   </ul>
   <li>What is (m + n) ?</li>
   <li>Its not an application of a type constructor</li>
   <li>Its an application of a type-function</li>
   <li>How is it defined</li>
   <li>How is append type checked?</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>22</font></div>
  </td>
  <td>
  <div id=PPTP22 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0022.htm');" id=PPTL22>Generalization #3<br>
    Computing over types</a></font></div>
  <div id=PPTC22 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>sum :: Nat ~&gt; Nat ~&gt; Nat</li>
   <li>{sum Z x} = x</li>
   <li>{sum (S x) y} = S {sum x y}</li>
   <br>
   <br>
   <li>append :: List a n -&gt;</li>
   <li><span style='mso-spacerun:yes'>          </span>List a m -&gt;</li>
   <li><span style='mso-spacerun:yes'>          </span>List a {sum n m}</li>
   <li>append Nil ys = ys</li>
   <li>append (Cons x xs) ys = Cons x (append xs ys)</li>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>23</font></div>
  </td>
  <td>
  <div id=PPTP23 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0024.htm');" id=PPTL23>Conclusion</a></font></div>
  <div id=PPTC23 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Stating static properties is a good way to think about programming</li>
   <li>It may lead to more reliable programs</li>
   <li>The compiler should ensure that programs maintain the stated properties</li>
   <li>Generalizing algebraic datatypes make it all possible</li>
   <ul>
    <li>Ranges other than T a</li>
    <li>a becomes an index describing a static property of x::T a</li>
    <li>New kinds let a have arbitrary structure</li>
    <li>Computing over a is sometimes necessary</li>
    <br>
    <br>
   </ul>
  </ul>
  </font></div>
  </td>
 </tr>
 <tr onmouseover="Over(this)" onmouseout="Out(this)" onclick="Follow(this)"
  style='cursor:hand'>
  <td align=right valign=top>
  <div class=sldNum><font size=2>24</font></div>
  </td>
  <td>
  <div id=PPTP24 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0025.htm');" id=PPTL24>Examples we have done</a></font></div>
  <div id=PPTC24 class=CTxt style='display:none'><font size=2>
  <ul>
   <li>Typed, staged interpreters</li>
   <ul>
    <li>For languages with binding, with patterns, algebraic datatypes</li>
   </ul>
   <li>Type preserving transformations</li>
   <ul>
    <li>Simplify :: Exp t -&gt; Exp t</li>
    <li>Cps:: Exp t -&gt; Exp {trans t}</li>
   </ul>
   <li>Proof carrying code</li>
   <li>Data Structures</li>
   <ul>
    <li>Red-Black trees, Binomial Heaps , Static length lists</li>
   </ul>
   <li>Languages with security properties</li>
   <li>Typed self-describing databases, where meta data in the database
       describes the database schema</li>
   <li>Programs that slip easily between dynamic and statically typed sections.
       Type-case is easy to encode with no additional mechanism</li>
  </ul>
  </font></div>
  </td>
 </tr>
</table>



</div>

<div style='display:none'><a href=master03.htm></a><a href=master03.xml></a><a
href=preview.wmf></a><a href=pres.xml></a><a href=slide0001.htm></a><a
href=slide0002.htm></a><a href=slide0003.htm></a><a
href="slide0003_image001.gif"></a><a href=slide0004.htm></a><a
href="slide0004_image002.gif"></a><a href=slide0006.htm></a><a
href=slide0005.htm></a><a href=slide0008.htm></a><a href=slide0009.htm></a><a
href="slide0009_image003.gif"></a><a href=slide0011.htm></a><a
href=slide0026.htm></a><a href="slide0026_image004.gif"></a><a
href="slide0026_image005.gif"></a><a href="slide0026_image006.gif"></a><a
href="slide0026_image007.gif"></a><a href="slide0026_image008.gif"></a><a
href="slide0026_image009.gif"></a><a href=slide0010.htm></a><a
href=slide0012.htm></a><a href=slide0013.htm></a><a href=slide0014.htm></a><a
href=slide0015.htm></a><a href="slide0015_image010.gif"></a><a
href=slide0016.htm></a><a href=slide0017.htm></a><a href=slide0018.htm></a><a
href=slide0019.htm></a><a href=slide0020.htm></a><a href=slide0023.htm></a><a
href=slide0022.htm></a><a href=slide0024.htm></a><a href=slide0025.htm></a><a
href="master03_stylesheet.css"></a><a href=script.js></a><a
href="../OmegaHaskellWkShp.htm"></a><a href=fullscreen.htm></a><a
href=buttons.gif></a><a href=frame.htm></a><a href=outline.htm></a></div>

</body>

</html>
