subArraysN :: Int -> [Int] -> [[Int]]
subArraysN n [] = []
subArraysN n ls@(x:xs) = if length ls >= n then (take n ls) : (subArraysN n xs) else [(take n ls)]

testStr = ["_________________________________________________1__________________________________________________",
           "_________________________________1_______________________________1__________________________________",
           "_________________________1_______________1_______________1_______________1__________________________",
           "_____________________1_______1_______1_______1_______1_______1_______1_______1______________________",
           "___________________1___1___1___1___1___1___1___1___1___1___1___1___1___1___1___1____________________",
           "__________________1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1___________________"]


countN :: [Char] -> [Int]
countN (y:ys) = reverse $ snd $ foldl (\(p,(x:xs)) a -> if (a == p) then (p,((x+1):xs)) else (a,(1:x:xs))) (y, [1]) ys
